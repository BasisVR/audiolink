Shader "Unlit/NewTextTest"
{
    Properties
    {
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            // make fog work
            #pragma multi_compile_fog
			#pragma target 5.0
            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                UNITY_FOG_COORDS(1)
                float4 vertex : SV_POSITION;
            };
			
            #ifndef glsl_mod
            #define glsl_mod(x, y) (x - y * floor(x / y))
            #endif

            ////////////////////////////////////////////////////////////////////
            // General debug functions below here

            // Shockingly, including the ability to render text doesn't
            // slow down number printing if text isn't used.
            // A basic versino of the debug screen without text was only 134
            // instructions.

            float PrintChar(uint selChar, float2 charUV, float2 softness)
            {
            	//.x = 15% .y = 35% added, it's 1.0. ( 0 1 would be 35% )
                const static uint2 bitmapNumberFont[86] = {
                    {  6990528,  15379168 }, //  0  '0' // 0110 1010 1010 1010 1100 0000      1110 1010 1010 1010 1110 0000
                    {  4998368,   4998368 }, //  1  '1' // 0100 1100 0100 0100 1110 0000      0100 1100 0100 0100 1110 0000
                    { 14870752,  14870752 }, //  2  '2' // 1110 0010 1110 1000 1110 0000      1110 0010 1110 1000 1110 0000
                    { 14828256,  14836448 }, //  3  '3' // 1110 0010 0100 0010 1110 0000      1110 0010 0110 0010 1110 0000
                    {  9101856,   9101856 }, //  4  '4' // 1000 1010 1110 0010 0010 0000      1000 1010 1110 0010 0010 0000
                    { 15262432,  15262432 }, //  5  '5' // 1110 1000 1110 0010 1110 0000      1110 1000 1110 0010 1110 0000
                    {  6875872,  15264480 }, //  6  '6' // 0110 1000 1110 1010 1110 0000      1110 1000 1110 1010 1110 0000
                    { 14829120,  14836800 }, //  7  '7' // 1110 0010 0100 0110 0100 0000      1110 0010 0110 0100 0100 0000
                    { 15395552,  15395552 }, //  8  '8' // 1110 1010 1110 1010 1110 0000      1110 1010 1110 1010 1110 0000
                    { 15393472,  15393504 }, //  9  '9' // 1110 1010 1110 0010 1100 0000      1110 1010 1110 0010 1110 0000
                    {        0,         0 }, // 10  ' '
                    {  4472896,   4472896 }, // 11  '!' // 0100 0100 0100 0000 0100 0000      0100 0100 0100 0000 0100 0000  
                    { 11141120,  11141120 }, // 12  '"' // 1010 1010 0000 0000 0000 0000      1010 1010 0000 0000 0000 0000
                    { 11447968,  11447968 }, // 13  '#' // 1010 1110 1010 1110 1010 0000      1010 1110 1010 1110 1010 0000
                    {  5162720,   5162724 }, // 14  '$' // 0100 1110 1100 0110 1110 0000      0100 1110 1100 0110 1110 0100
                    {  4868704,  15395552 }, // 15  '&' // 0100 1010 0100 1010 0110 0000      1110 1010 1110 1010 1110 0000
                    {  4456448,   4456448 }, // 16  ''' // 0100 0100 0000 0000 0000 0000      1110 1010 1110 1010 1110 0000
                    {  2376736,   6571104 }, // 17  '(' // 0010 0100 0100 0100 0010 0000      0110 0100 0100 0100 0110 0000
                    {  8668288,  12862656 }, // 18  ')' // 1000 0100 0100 0100 1000 0000      1100 0100 0100 0100 1100 0000
                    {   674304,    978432 }, // 19  '*' // 0000 1010 0100 1010 0000 0000      0000 1110 1110 1110 0000 0000
                    {   320512,    320512 }, // 20  '+' // 0000 0100 1110 0100 0000 0000      0000 0100 1110 0100 0000 0000
                    {     1088,      1228 }, // 21  ',' // 0000 0000 0000 0100 0100 0000      0000 0000 0000 0100 1100 1100
                    {    57344,     57344 }, // 22  '-' // 0000 0000 1110 0000 0000 0000      0000 0000 1110 0000 0000 0000
                    {       64,        64 }, // 23  '.' // 0000 0000 0000 0000 0100 0000      0000 0000 0000 0000 0100 0000
                    {  2246784,   2287744 }, // 24  '/' // 0010 0010 0100 1000 1000 0000      0010 0010 1110 1000 1000 0000
                    {   263168,    263168 }, // 25  ':' // 0000 0100 0000 0100 0000 0000      0000 0100 0000 0100 0000 0000
                    {   263232,    263244 }, // 26  ';' // 0000 0100 0000 0100 0100 0000      0000 0100 0000 0100 0100 1100
                    {  2393120,   7261792 }, // 27  '<' // 0010 0100 1000 0100 0010 0000      0110 1110 1100 1110 0110 0000
                    {   921088,    921088 }, // 28  '=' // 0000 1110 0000 1110 0000 0000      0000 1110 0000 1110 0000 0000
                    {  8660096,  13528768 }, // 29  '>' // 1000 0100 0010 0100 1000 0000      1100 1110 0110 1110 1100 0000
                    { 12730432,  14836800 }, // 30  '?' // 1100 0010 0100 0000 0100 0000      1110 0010 0110 0100 0100 0000
                    {  4849664,  15597568 }, // 31  '^' // 0100 1010 0000 0000 0000 0000      1110 1110 0000 0000 0000 0000
                    { 15395488,  15395488 }, // 32  'A' // 1110 1010 1110 1010 1010 0000      1110 1010 1110 1010 1010 0000
                    { 15387360,  15395552 }, // 33  'B' // 1110 1010 1100 1010 1110 0000      1110 1010 1110 1010 1110 0000
                    { 15239392,  15239392 }, // 34  'C' // 1110 1000 1000 1000 1110 0000      1110 1000 1000 1000 1110 0000
                    { 13281984,  15379168 }, // 35  'D' // 1100 1010 1010 1010 1100 0000      1110 1010 1010 1010 1110 0000
                    { 15255776,  15255776 }, // 36  'E' // 1110 1000 1100 1000 1110 0000      1110 1000 1100 1000 1110 0000
                    { 15255680,  15255680 }, // 37  'F' // 1110 1000 1100 1000 1000 0000      1110 1000 1100 1000 1000 0000
                    { 15248096,  15248096 }, // 38  'G' // 1110 1000 1010 1010 1110 0000      1110 1000 1010 1010 1110 0000
                    { 11201184,  11201184 }, // 39  'H' // 1010 1010 1110 1010 1010 0000      1010 1010 1110 1010 1010 0000
                    { 14959840,  14959840 }, // 40  'I' // 1110 0100 0100 0100 1110 0000      1110 0100 0100 0100 1110 0000
                    {  2239200,   2239200 }, // 41  'J' // 0010 0010 0010 1010 1110 0000      0010 0010 0010 1010 1110 0000
                    { 11192992,  11201184 }, // 42  'K' // 1010 1010 1100 1010 1010 0000      1010 1010 1110 1010 1010 0000
                    {  8947936,   8947936 }, // 43  'L' // 1000 1000 1000 1000 1110 0000      1000 1000 1000 1000 1110 0000
                    { 11463328,  15657632 }, // 44  'M' // 1010 1110 1110 1010 1010 0000      1110 1110 1110 1010 1010 0000
                    { 13281952,  15379104 }, // 45  'N' // 1100 1010 1010 1010 1010 0000      1110 1010 1010 1010 1010 0000
                    { 15379168,  15379168 }, // 46  'O' // 1110 1010 1010 1010 1110 0000      1110 1010 1010 1010 1110 0000
                    { 15394944,  15394944 }, // 47  'P' // 1110 1010 1110 1000 1000 0000      1110 1010 1110 1000 1000 0000
                    { 15379040,  15379168 }, // 48  'Q' // 1110 1010 1010 1010 0110 0000      1110 1010 1010 1010 1110 0000
                    { 15387296,  15395488 }, // 49  'R' // 1110 1010 1100 1010 1010 0000      1110 1010 1110 1010 1010 0000
                    {  6873792,  15262432 }, // 50  'S' // 0110 1000 1110 0010 1100 0000      1110 1000 1110 0010 1110 0000
                    { 14959680,  14959680 }, // 51  'T' // 1110 0100 0100 0100 0100 0000      1110 0100 0100 0100 0100 0000
                    { 11184736,  11184864 }, // 52  'U' // 1010 1010 1010 1010 0110 0000      1010 1010 1010 1010 1110 0000
                    { 11445472,  11202112 }, // 53  'V' // 1010 1110 1010 0100 1110 0000      1010 1010 1110 1110 0100 0000
                    { 11202208,  11202272 }, // 54  'W' // 1010 1010 1110 1110 1010 0000      1010 1010 1110 1110 1110 0000
                    { 11160224,  11201184 }, // 55  'X' // 1010 1010 0100 1010 1010 0000      1010 1010 1110 1010 1010 0000
                    { 15352896,  11420736 }, // 56  'Y' // 1110 1010 0100 0100 0100 0000      1010 1110 0100 0100 0100 0000
                    { 14829792,  14870752 }, // 57  'Z' // 1110 0010 0100 1000 1110 0000      1110 0010 1110 1000 1110 0000
                    {   436832,    961248 }, // 58  'a' // 0000 0110 1010 1010 0110 0000      0000 1110 1010 1010 1110 0000
                    {  9349856,   9349856 }, // 59  'b' // 1000 1110 1010 1010 1110 0000      1000 1110 1010 1010 1110 0000
                    {   952544,    952544 }, // 60  'c' // 0000 1110 1000 1000 1110 0000      0000 1110 1000 1000 1110 0000
                    {  3058400,   3058400 }, // 61  'd' // 0010 1110 1010 1010 1110 0000      0010 1110 1010 1010 1110 0000
                    {   961760,    962272 }, // 62  'e' // 0000 1110 1010 1100 1110 0000      0000 1110 1010 1110 1110 0000
                    {  6612032,   6612032 }, // 63  'f' // 0110 0100 1110 0100 0100 0000      0110 0100 1110 0100 0100 0000
                    {   976608,    962272 }, // 64  'g' // 0000 1110 1110 0110 1110 0000      0000 1110 1010 1110 1110 0000
                    {  9349792,   9349792 }, // 65  'h' // 1000 1110 1010 1010 1010 0000      1000 1110 1010 1010 1010 0000
                    {  4211776,   4473920 }, // 66  'i' // 0100 0000 0100 0100 0100 0000      0100 0100 0100 0100 0100 0000
                    {  2108128,   2239200 }, // 67  'j' // 0010 0000 0010 1010 1110 0000      0010 0010 0010 1010 1110 0000
                    {  8957088,   9088672 }, // 68  'k' // 1000 1000 1010 1100 1010 0000      1000 1010 1010 1110 1010 0000
                    {  4473920,   4473920 }, // 69  'l' // 0100 0100 0100 0100 0100 0000      0100 0100 0100 0100 0100 0000
                    {   715424,    977568 }, // 70  'm' // 0000 1010 1110 1010 1010 0000      0000 1110 1110 1010 1010 0000
                    {   830112,    961184 }, // 71  'n' // 0000 1100 1010 1010 1010 0000      0000 1110 1010 1010 1010 0000
                    {   961248,    961248 }, // 72  'o' // 0000 1110 1010 1010 1110 0000      0000 1110 1010 1010 1110 0000
                    {   962176,    962176 }, // 73  'p' // 0000 1110 1010 1110 1000 0000      0000 1110 1010 1110 1000 0000
                    {   962080,    962080 }, // 74  'q' // 0000 1110 1010 1110 0010 0000      0000 1110 1010 1110 0010 0000
                    {   714880,    968832 }, // 75  'r' // 0000 1010 1110 1000 1000 0000      0000 1110 1100 1000 1000 0000
                    {   968416,    968416 }, // 76  's' // 0000 1110 1100 0110 1110 0000      0000 1110 1100 0110 1110 0000
                    {  5129280,   5129280 }, // 77  't' // 0100 1110 0100 0100 0100 0000      0100 1110 0100 0100 0100 0000
                    {   699104,    699104 }, // 78  'u' // 0000 1010 1010 1010 1110 0000      0000 1010 1010 1010 1110 0000
                    {   715328,    700128 }, // 79  'v' // 0000 1010 1110 1010 0100 0000      0000 1010 1010 1110 1110 0000
                    {   700064,    700128 }, // 80  'w' // 0000 1010 1010 1110 1010 0000      0000 1010 1010 1110 1110 0000
                    {   672928,    716448 }, // 81  'x' // 0000 1010 0100 0100 1010 0000      0000 1010 1110 1110 1010 0000
                    {   713312,    713440 }, // 82  'y' // 0000 1010 1110 0010 0110 0000      0000 1010 1110 0010 1110 0000
                    {   945376,    945376 }, // 83  'z' // 0000 1110 0110 1100 1110 0000      0000 1110 0110 1100 1110 0000
                    {      224,       224 }, // 84  '_' // 0000 0000 0000 0000 1110 0000      0000 0000 0000 0000 1110 0000
            		{ 0,  0 }, // 85  '@' // Not written yet.
            		//Maybe follow ascii?
                };

            	charUV += float2(0, 0.5);
                uint2 bitmap = bitmapNumberFont[selChar];
            	uint4 bma = bitmap.xxxx;
            	uint4 bmb = bitmap.yyyy;
                uint2 charXY = charUV;
                uint index = charXY.x + charXY.y * 4 - 4;
                uint4 shft = uint4(0, 1, 4, 5) + index;
            	uint4 andone = uint4(1, 1, 1, 1);
            	bma = (bma >> shft) & andone;
            	bmb = (bmb >> shft) & andone;
                float4 neighbors = (bmb & 1) ? (bma ? 1 : 0.35) : (bma ? 0.15 : 0);
                float2 shift = smoothstep(0, 1, frac(charUV));
                float o = lerp(
                          lerp(neighbors.x, neighbors.y, shift.x),
                          lerp(neighbors.z, neighbors.w, shift.x), shift.y);
                return saturate(o * softness - softness / 2);
            }

            // Used for debugging
            float PrintNumberOnLine(float number, uint fixeddiv, uint digit, float2 charUV, uint numfractdigits, bool leadzero, float2 softness)
            {
                uint selnum;
                if (number < 0 && digit == 0)
                {
                    selnum = 22;  // - sign
                }
                else
                {
                    number = abs(number);

                    if (digit == fixeddiv)
                    {
                        selnum = 23; 
                    }
                    else
                    {
                        int dmfd = (int)digit - (int)fixeddiv;
                        if (dmfd > 0)
                        {
                            //fractional part.
            				uint fpart = round(frac(number) * pow(10, numfractdigits));
                            uint l10 = pow(10.0, numfractdigits - dmfd);
                            selnum = ((uint)(fpart / l10)) % 10;
                        }
                        else
                        {
                            float l10 = pow(10.0, (float)(dmfd + 1));
                            selnum = (uint)(number * l10);

                            //Disable leading 0's?
                            if (!leadzero && dmfd != -1 && selnum == 0 && dmfd < 0.5)
                                selnum = 10; // space
                            else
                                selnum %= (uint)10;
                        }
                    }
                }

                return PrintChar(selnum, charUV, softness);
            }

            v2f vert (appdata v)
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                UNITY_TRANSFER_FOG(o,o.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                float2 iuv = i.uv;
                iuv.y = 1.0 - iuv.y;
                const uint rows = 20;
                const uint cols = 30;
                const uint number_area_cols = 11;
                
                float2 pos = iuv * float2(cols, rows);
                uint2 dig = (uint2)pos;

                // This line of code is tricky;  We determine how much we should soften the edge of the text
                // based on how quickly the text is moving across our field of view.  This gives us realy nice
                // anti-aliased edges.
                float2 softness = 2.0 / pow(length(float2(ddx(pos.x), ddy(pos.y))), 0.5);

                // Another option would be to set softness to 20 and YOLO it.
                float2 fmxy = float2(4, 6) - glsl_mod(pos, 1.0) * float2(4.0, 6.0);
                
				if (dig.y < 2)
				{
					uint charlines[20] = { 
						12, 13, 13, 13, 13, 13, 13, 13, 13, 13,
						13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
						};
                    return PrintChar(charlines[dig.x + dig.y * 10], fmxy, softness);
				}
				else if (dig.y == 2)
				{
					if (dig.x < 5)
					{
						float value = 1.0899;
						return PrintNumberOnLine(value, 1, dig.x, fmxy, 3, false, softness);                
					}
					else
					{
						float value = -2.3;
						return PrintNumberOnLine(value, 3, dig.x - 5, fmxy, 2, false, softness);                
					}
				}
				else
				{
					uint sendchar = (dig.y - 3) * 10 + dig.x;
                    return PrintChar(sendchar, fmxy, softness);
				}
            }
            ENDCG
        }
    }
}
